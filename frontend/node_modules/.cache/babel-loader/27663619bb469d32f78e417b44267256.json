{"ast":null,"code":"import axios from 'axios';\n\nclass TodoDataService {\n  getAll(token) {\n    axios.defaults.headers.common[\"Authorization\"] = \"Token \" + token;\n    return axios.get('http://localhost:8000/api/todos/');\n  }\n\n  createTodo(data, token) {\n    axios.defaults.headers.common[\"Authorization\"] = \"Token \" + token;\n    return axios.post(\"http://localhost:8000/api/todos/\", data);\n  }\n\n  updateTodo(id, data, token) {\n    axios.defaults.headers.common[\"Authorization\"] = \"Token \" + token;\n    return axios.put(`http://localhost:8000/api/todos/${id}`, data);\n  }\n\n  deleteTodo(id, token) {\n    axios.defaults.headers.common[\"Authorization\"] = \"Token \" + token;\n    return axios.delete(`http://localhost:8000/api/todos/${id}`);\n  }\n\n  completeTodo(id, token) {\n    axios.defaults.headers.common[\"Authorization\"] = \"Token \" + token;\n    return axios.put(`http://localhost:8000/api/todos/${id}/complete`);\n  }\n\n  login(data) {\n    return axios.post(\"http://localhost:8000/api/login/\", data);\n  }\n\n  signup(data) {\n    return axios.post(\"http://localhost:8000/api/signup/\", data);\n  }\n\n}\n\nexport default new TodoDataService();\n\nasync function login() {\n  let user = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  // default user to null\n  TodoDataService.login(user).then(response => {\n    setToken(response.data.token);\n    setUser(user.username);\n    localStorage.setItem('token', response.data.token);\n    localStorage.setItem('user', user.username);\n    setError('');\n  }).catch(e => {\n    console.log('login', e);\n    setError(e.toString());\n  });\n}","map":{"version":3,"sources":["/home/karlygach/react/frontend/src/services/todos.js"],"names":["axios","TodoDataService","getAll","token","defaults","headers","common","get","createTodo","data","post","updateTodo","id","put","deleteTodo","delete","completeTodo","login","signup","user","then","response","setToken","setUser","username","localStorage","setItem","setError","catch","e","console","log","toString"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,eAAN,CAAsB;AAClBC,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACVH,IAAAA,KAAK,CAACI,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,WAAWH,KAA5D;AACA,WAAOH,KAAK,CAACO,GAAN,CAAU,kCAAV,CAAP;AACH;;AACDC,EAAAA,UAAU,CAACC,IAAD,EAAON,KAAP,EAAc;AACpBH,IAAAA,KAAK,CAACI,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,WAAWH,KAA5D;AACA,WAAOH,KAAK,CAACU,IAAN,CAAW,kCAAX,EAA+CD,IAA/C,CAAP;AACH;;AACDE,EAAAA,UAAU,CAACC,EAAD,EAAKH,IAAL,EAAWN,KAAX,EAAkB;AACxBH,IAAAA,KAAK,CAACI,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,WAAWH,KAA5D;AACA,WAAOH,KAAK,CAACa,GAAN,CAAW,mCAAkCD,EAAG,EAAhD,EAAmDH,IAAnD,CAAP;AACH;;AACDK,EAAAA,UAAU,CAACF,EAAD,EAAKT,KAAL,EAAY;AAClBH,IAAAA,KAAK,CAACI,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,WAAWH,KAA5D;AACA,WAAOH,KAAK,CAACe,MAAN,CAAc,mCAAkCH,EAAG,EAAnD,CAAP;AACH;;AACDI,EAAAA,YAAY,CAACJ,EAAD,EAAKT,KAAL,EAAY;AACpBH,IAAAA,KAAK,CAACI,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,WAAWH,KAA5D;AACA,WAAOH,KAAK,CAACa,GAAN,CAAW,mCAAkCD,EAAG,WAAhD,CAAP;AACH;;AACDK,EAAAA,KAAK,CAACR,IAAD,EAAO;AACR,WAAOT,KAAK,CAACU,IAAN,CAAW,kCAAX,EAA+CD,IAA/C,CAAP;AACH;;AACDS,EAAAA,MAAM,CAACT,IAAD,EAAO;AACT,WAAOT,KAAK,CAACU,IAAN,CAAW,mCAAX,EAAgDD,IAAhD,CAAP;AACH;;AA1BiB;;AA4BtB,eAAe,IAAIR,eAAJ,EAAf;;AAEA,eAAegB,KAAf,GAAkC;AAAA,MAAbE,IAAa,uEAAN,IAAM;AAAE;AAChClB,EAAAA,eAAe,CAACgB,KAAhB,CAAsBE,IAAtB,EACKC,IADL,CACUC,QAAQ,IAAI;AACdC,IAAAA,QAAQ,CAACD,QAAQ,CAACZ,IAAT,CAAcN,KAAf,CAAR;AACAoB,IAAAA,OAAO,CAACJ,IAAI,CAACK,QAAN,CAAP;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BL,QAAQ,CAACZ,IAAT,CAAcN,KAA5C;AACAsB,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BP,IAAI,CAACK,QAAlC;AACAG,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,GAPL,EAQKC,KARL,CAQWC,CAAC,IAAI;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,CAArB;AACAF,IAAAA,QAAQ,CAACE,CAAC,CAACG,QAAF,EAAD,CAAR;AACH,GAXL;AAYH","sourcesContent":["import axios from 'axios';\nclass TodoDataService {\n    getAll(token) {\n        axios.defaults.headers.common[\"Authorization\"] = \"Token \" + token;\n        return axios.get('http://localhost:8000/api/todos/');\n    }\n    createTodo(data, token) {\n        axios.defaults.headers.common[\"Authorization\"] = \"Token \" + token;\n        return axios.post(\"http://localhost:8000/api/todos/\", data);\n    }\n    updateTodo(id, data, token) {\n        axios.defaults.headers.common[\"Authorization\"] = \"Token \" + token;\n        return axios.put(`http://localhost:8000/api/todos/${id}`, data);\n    }\n    deleteTodo(id, token) {\n        axios.defaults.headers.common[\"Authorization\"] = \"Token \" + token;\n        return axios.delete(`http://localhost:8000/api/todos/${id}`);\n    }\n    completeTodo(id, token) {\n        axios.defaults.headers.common[\"Authorization\"] = \"Token \" + token;\n        return axios.put(`http://localhost:8000/api/todos/${id}/complete`);\n    }\n    login(data) {\n        return axios.post(\"http://localhost:8000/api/login/\", data);\n    }\n    signup(data) {\n        return axios.post(\"http://localhost:8000/api/signup/\", data);\n    }\n}\nexport default new TodoDataService();\n\nasync function login(user = null) { // default user to null\n    TodoDataService.login(user)\n        .then(response => {\n            setToken(response.data.token);\n            setUser(user.username);\n            localStorage.setItem('token', response.data.token);\n            localStorage.setItem('user', user.username);\n            setError('');\n        })\n        .catch(e => {\n            console.log('login', e);\n            setError(e.toString());\n        });\n}"]},"metadata":{},"sourceType":"module"}